const exec = require("executive");
const Client = require("node-rest-client").Client;
const fs = require("fs");
const path = require("path");
const findRoot = require("find-root");
const rcFilename = ".owditrc";

/**
 * @module owdit
 */

/**
 * @typedef VulnerabilityReport
 * @property {!String} title - Title of the vulnerability
 * @property {!String} description - Short description of the vulnerability
 * @property {!String} versions - Versions of the package that are affected by this vulnerability
 * @property {!String[]} references - A list of URLs containing links to more details about the vulnerability
 */

/**
 * @typedef VulnerablePackage
 * @property {!String} name - Name of the package
 * @property {!String} version - Version of the package in semver format
 * @property {!String[]} path - Top-bottom include list of the package; e.g. ["mypackage@1.0.2", "express@2.5.11", "qs@0.4.2"]
 * @property {!Vulnerability[]} vulnerabilities - List of found vulnerabilities for the package
 */

/**
 * @typedef DependencyReport
 * @property {!Number} vulnerabilityCount - Number of vulnerabilities in the report; can be zero
 * @property {VulnerablePackage[]} vulnerablePackages - A list of vulnerable packages together with their vulnerabilities
 */

/**
 * @callback CheckCallback
 * @param {?Error} error - Not null if an error occurred
 * @param {?DependencyReport} dependencyReport - Not null if no error occurred; contains the found vulnerabilities
 */

/**
 * Read from .owditrc the lists of packages that should be excluded or only generate warnings
 * @param {String} cwd - The current working directory from which to start looking for the .owditrc file
 * @returns {Object} - Returns an object containing a list of modules to only warn about vulnerabilities and a list of modules to ignore
 *
 * @private
 */
function readWarnsAndExcludes(cwd) {
  let warns = [];
  let excludes = [];
  const projectRoot = findRoot(cwd);
  const rcFile = path.resolve(projectRoot, rcFilename);

  if (fs.existsSync(rcFile)) { //eslint-disable-line security/detect-non-literal-fs-filename, no-sync
    try {
      const content = JSON.parse(fs.readFileSync(rcFile)); //eslint-disable-line security/detect-non-literal-fs-filename, no-sync

      warns = content.warns || [];
      excludes = content.excludes || [];
    } catch (err) {
      // Display any error occurred when reading or parsing .owditrc but don't stop the check.
      // At this moment, this file's sole purpose is to make the vulnerability check less strict.
      // Going on when there has been an error at this step means all vulnerabilities will be taken
      // into account and the check can only get stricter.
      console.log(err);
      console.log(`Error reading or parsing ${rcFile}. As a result all dependencies will be scanned.`);
    }
  }

  if (warns.length) {
    console.log(`Vulnerabilities in these packages will only generate warnings: ${warns.join(", ")}.`);
  }
  if (excludes.length) {
    console.log(`Vulnerabilities in these packages will be IGNORED: ${excludes.join(", ")}.`);
  }

  return {
    warns,
    excludes
  };
}

/**
 * Recursively checks the dependencies described in the package.json file in the directory `cwd`
 * for known vulnerabilities.
 * @param  {!String}   cwd            - The current working directory; used to locate the package.json file
 * @param  {!CheckCallback} callback  - Called when the function finishes
 * @returns {null}
 */
function check(cwd, callback) {
  const {warns, excludes} = readWarnsAndExcludes(cwd);

  const result = exec.sync("npm ls --production=true --json", {
    cwd:    cwd,
    strict: true,
    quiet:  true
  });

  if (result.status !== 0) {  //eslint-disable-line no-magic-numbers
	console.error(`Error running npm ls: ${result.stderr}`);
  }
  let packages = [];

  try {
    packages = JSON.parse(result.stdout);
  } catch (err) {
    return callback(err);
  }

  const registerModules = {};

  /**
   * Makes a flat list of the hierarchical dependency tree generated by npm ls.
   * This method also filters out double packages if there should be any present
   * @param  {String} parentPackage - name of the parent package
   * @param  {Object} dependencies  - Object containing nested key-value pairs for dependencies
   * @return {Object[]} A flat list of packages containing the package manager (i.e. npm), the name of the package and the version of the package
   * @private
   */
  function flattenDependencies(parentPackage, dependencies) {
    const list = [];
    const deps = Object.keys(dependencies);

    deps.forEach((dependency) => {
      const dependent = dependencies[dependency];
      if (excludes.includes(dependency) || excludes.includes(`${dependency}@${dependent.version}`)) {
        return;
      }
      const key = dependency + dependent.version;

      if (!registerModules.hasOwnProperty(key)) {
        const path = [...parentPackage, `${dependency}@${dependent.version}`];

        registerModules[key] = dependent;
        registerModules[key].path = path;
        list.push({
          pm:      "npm",
          name:    dependency,
          version: dependent.version || dependent.required.version
        });
        if (dependent.dependencies) {
          list.push(...flattenDependencies(path, dependent.dependencies));
        }
      }
    });

    return list;
  }
  if (packages.dependencies) {
    const client = new Client();
    const flatList = flattenDependencies([`${packages.name}@${packages.version}`], packages.dependencies);
    const restOptions = {
      data:    flatList,
      headers: {"Content-Type": "application/json"}
    };
    const request = client.post("https://ossindex.net/v2.0/package", restOptions, (data, response) => {
      // This will send the error from oss indes back to the consumer if they are having problems or if the servers are down
      // For example: If they are doing server maintence
      if(response.statusCode >= 500) {
        callback(data.toString());
      } else {
        let numVulnerabilitiesFails = 0;   //eslint-disable-line no-magic-numbers
        let numVulnerabilitiesWarns = 0;   //eslint-disable-line no-magic-numbers
        const vulnerablePackages = data.filter((element) => {
          if (warns.includes(element.name) || warns.includes(`${element.name}@${element.version}`)) {
            numVulnerabilitiesWarns += element["vulnerability-matches"];
          } else {
            numVulnerabilitiesFails += element["vulnerability-matches"];
          }

          return element["vulnerability-matches"] > 0;  //eslint-disable-line no-magic-numbers
        }).map((element) => {
          return {
           name:            element.name,
           warnOnly:        warns.includes(element.name) || warns.includes(`${element.name}@${element.version}`),
           version:         element.version,
           path:            registerModules[`${element.name}${element.version}`].path,
           vulnerabilities: element.vulnerabilities.map((element) => {
              return {
                title:       element.title,
                description: element.description,
                versions:    element.versions,
                references:  element.references
              };
            })
          };
        });
        const vulnerabilityReport = {
          vulnerabilityFailCount: numVulnerabilitiesFails,
          vulnerabilityWarnCount: numVulnerabilitiesWarns,
          vulnerablePackages:     vulnerablePackages
        };

        return callback(null, vulnerabilityReport);
      }
    });

    return request.on("error", callback);
  } else {
    return callback(null, {
      vulnerabilityCount: 0,  //eslint-disable-line no-magic-numbers
      vulnerablePackages: []
    });
  }
}

module.exports.check = check;
